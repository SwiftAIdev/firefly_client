# coding: utf-8

"""
    Firefly III API v2.1.0

    This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2024-09-10T05:07:57+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 

    The version of the OpenAPI document: 2.1.0
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from firefly_client.models.account_role_property import AccountRoleProperty
from firefly_client.models.credit_card_type_property import CreditCardTypeProperty
from firefly_client.models.interest_period_property import InterestPeriodProperty
from firefly_client.models.liability_type_property import LiabilityTypeProperty
from typing import Optional, Set
from typing_extensions import Self

class AccountUpdate(BaseModel):
    """
    AccountUpdate
    """ # noqa: E501
    name: StrictStr
    iban: Optional[StrictStr] = None
    bic: Optional[StrictStr] = None
    account_number: Optional[StrictStr] = None
    opening_balance: Optional[StrictStr] = None
    opening_balance_date: Optional[datetime] = None
    virtual_balance: Optional[StrictStr] = None
    currency_id: Optional[StrictStr] = Field(default=None, description="Use either currency_id or currency_code. Defaults to the user's default currency.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Use either currency_id or currency_code. Defaults to the user's default currency.")
    active: Optional[StrictBool] = Field(default=True, description="If omitted, defaults to true.")
    order: Optional[StrictInt] = Field(default=None, description="Order of the account")
    include_net_worth: Optional[StrictBool] = Field(default=True, description="If omitted, defaults to true.")
    account_role: Optional[AccountRoleProperty] = None
    credit_card_type: Optional[CreditCardTypeProperty] = None
    monthly_payment_date: Optional[datetime] = Field(default=None, description="Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.")
    liability_type: Optional[LiabilityTypeProperty] = None
    interest: Optional[StrictStr] = Field(default=None, description="Mandatory when type is liability. Interest percentage.")
    interest_period: Optional[InterestPeriodProperty] = None
    notes: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the account's location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the account's location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.")
    zoom_level: Optional[StrictInt] = Field(default=None, description="Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.")
    __properties: ClassVar[List[str]] = ["name", "iban", "bic", "account_number", "opening_balance", "opening_balance_date", "virtual_balance", "currency_id", "currency_code", "active", "order", "include_net_worth", "account_role", "credit_card_type", "monthly_payment_date", "liability_type", "interest", "interest_period", "notes", "latitude", "longitude", "zoom_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if iban (nullable) is None
        # and model_fields_set contains the field
        if self.iban is None and "iban" in self.model_fields_set:
            _dict['iban'] = None

        # set to None if bic (nullable) is None
        # and model_fields_set contains the field
        if self.bic is None and "bic" in self.model_fields_set:
            _dict['bic'] = None

        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['account_number'] = None

        # set to None if opening_balance_date (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance_date is None and "opening_balance_date" in self.model_fields_set:
            _dict['opening_balance_date'] = None

        # set to None if account_role (nullable) is None
        # and model_fields_set contains the field
        if self.account_role is None and "account_role" in self.model_fields_set:
            _dict['account_role'] = None

        # set to None if credit_card_type (nullable) is None
        # and model_fields_set contains the field
        if self.credit_card_type is None and "credit_card_type" in self.model_fields_set:
            _dict['credit_card_type'] = None

        # set to None if monthly_payment_date (nullable) is None
        # and model_fields_set contains the field
        if self.monthly_payment_date is None and "monthly_payment_date" in self.model_fields_set:
            _dict['monthly_payment_date'] = None

        # set to None if liability_type (nullable) is None
        # and model_fields_set contains the field
        if self.liability_type is None and "liability_type" in self.model_fields_set:
            _dict['liability_type'] = None

        # set to None if interest (nullable) is None
        # and model_fields_set contains the field
        if self.interest is None and "interest" in self.model_fields_set:
            _dict['interest'] = None

        # set to None if interest_period (nullable) is None
        # and model_fields_set contains the field
        if self.interest_period is None and "interest_period" in self.model_fields_set:
            _dict['interest_period'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if zoom_level (nullable) is None
        # and model_fields_set contains the field
        if self.zoom_level is None and "zoom_level" in self.model_fields_set:
            _dict['zoom_level'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "iban": obj.get("iban"),
            "bic": obj.get("bic"),
            "account_number": obj.get("account_number"),
            "opening_balance": obj.get("opening_balance"),
            "opening_balance_date": obj.get("opening_balance_date"),
            "virtual_balance": obj.get("virtual_balance"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "active": obj.get("active") if obj.get("active") is not None else True,
            "order": obj.get("order"),
            "include_net_worth": obj.get("include_net_worth") if obj.get("include_net_worth") is not None else True,
            "account_role": obj.get("account_role"),
            "credit_card_type": obj.get("credit_card_type"),
            "monthly_payment_date": obj.get("monthly_payment_date"),
            "liability_type": obj.get("liability_type"),
            "interest": obj.get("interest"),
            "interest_period": obj.get("interest_period"),
            "notes": obj.get("notes"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "zoom_level": obj.get("zoom_level")
        })
        return _obj


