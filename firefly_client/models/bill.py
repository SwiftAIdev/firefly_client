# coding: utf-8

"""
    Firefly III API v2.1.0

    This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2024-09-10T05:07:57+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 

    The version of the OpenAPI document: 2.1.0
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firefly_client.models.bill_paid_dates_inner import BillPaidDatesInner
from firefly_client.models.bill_repeat_frequency import BillRepeatFrequency
from typing import Optional, Set
from typing_extensions import Self

class Bill(BaseModel):
    """
    Bill
    """ # noqa: E501
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    currency_id: Optional[StrictStr] = Field(default=None, description="Use either currency_id or currency_code")
    currency_code: Optional[StrictStr] = Field(default=None, description="Use either currency_id or currency_code")
    currency_symbol: Optional[StrictStr] = None
    currency_decimal_places: Optional[StrictInt] = None
    name: StrictStr
    amount_min: StrictStr
    amount_max: StrictStr
    var_date: datetime = Field(alias="date")
    end_date: Optional[datetime] = Field(default=None, description="The date after which this bill is no longer valid or applicable")
    extension_date: Optional[datetime] = Field(default=None, description="The date before which the bill must be renewed (or cancelled)")
    repeat_freq: BillRepeatFrequency
    skip: Optional[StrictInt] = Field(default=None, description="How often the bill must be skipped. 1 means a bi-monthly bill.")
    active: Optional[StrictBool] = Field(default=None, description="If the bill is active.")
    order: Optional[StrictInt] = Field(default=None, description="Order of the bill.")
    notes: Optional[StrictStr] = None
    next_expected_match: Optional[datetime] = Field(default=None, description="When the bill is expected to be due.")
    next_expected_match_diff: Optional[StrictStr] = Field(default=None, description="Formatted (locally) when the bill is due.")
    object_group_id: Optional[StrictStr] = Field(default=None, description="The group ID of the group this object is part of. NULL if no group.")
    object_group_order: Optional[StrictInt] = Field(default=None, description="The order of the group. At least 1, for the highest sorting.")
    object_group_title: Optional[StrictStr] = Field(default=None, description="The name of the group. NULL if no group.")
    pay_dates: Optional[List[datetime]] = Field(default=None, description="Array of future dates when the bill is expected to be paid. Autogenerated.")
    paid_dates: Optional[List[BillPaidDatesInner]] = Field(default=None, description="Array of past transactions when the bill was paid.")
    __properties: ClassVar[List[str]] = ["created_at", "updated_at", "currency_id", "currency_code", "currency_symbol", "currency_decimal_places", "name", "amount_min", "amount_max", "date", "end_date", "extension_date", "repeat_freq", "skip", "active", "order", "notes", "next_expected_match", "next_expected_match_diff", "object_group_id", "object_group_order", "object_group_title", "pay_dates", "paid_dates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bill from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "updated_at",
            "currency_symbol",
            "currency_decimal_places",
            "next_expected_match",
            "next_expected_match_diff",
            "object_group_order",
            "pay_dates",
            "paid_dates",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in paid_dates (list)
        _items = []
        if self.paid_dates:
            for _item_paid_dates in self.paid_dates:
                if _item_paid_dates:
                    _items.append(_item_paid_dates.to_dict())
            _dict['paid_dates'] = _items
        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if extension_date (nullable) is None
        # and model_fields_set contains the field
        if self.extension_date is None and "extension_date" in self.model_fields_set:
            _dict['extension_date'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if next_expected_match (nullable) is None
        # and model_fields_set contains the field
        if self.next_expected_match is None and "next_expected_match" in self.model_fields_set:
            _dict['next_expected_match'] = None

        # set to None if next_expected_match_diff (nullable) is None
        # and model_fields_set contains the field
        if self.next_expected_match_diff is None and "next_expected_match_diff" in self.model_fields_set:
            _dict['next_expected_match_diff'] = None

        # set to None if object_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.object_group_id is None and "object_group_id" in self.model_fields_set:
            _dict['object_group_id'] = None

        # set to None if object_group_order (nullable) is None
        # and model_fields_set contains the field
        if self.object_group_order is None and "object_group_order" in self.model_fields_set:
            _dict['object_group_order'] = None

        # set to None if object_group_title (nullable) is None
        # and model_fields_set contains the field
        if self.object_group_title is None and "object_group_title" in self.model_fields_set:
            _dict['object_group_title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bill from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "currency_id": obj.get("currency_id"),
            "currency_code": obj.get("currency_code"),
            "currency_symbol": obj.get("currency_symbol"),
            "currency_decimal_places": obj.get("currency_decimal_places"),
            "name": obj.get("name"),
            "amount_min": obj.get("amount_min"),
            "amount_max": obj.get("amount_max"),
            "date": obj.get("date"),
            "end_date": obj.get("end_date"),
            "extension_date": obj.get("extension_date"),
            "repeat_freq": obj.get("repeat_freq"),
            "skip": obj.get("skip"),
            "active": obj.get("active"),
            "order": obj.get("order"),
            "notes": obj.get("notes"),
            "next_expected_match": obj.get("next_expected_match"),
            "next_expected_match_diff": obj.get("next_expected_match_diff"),
            "object_group_id": obj.get("object_group_id"),
            "object_group_order": obj.get("object_group_order"),
            "object_group_title": obj.get("object_group_title"),
            "pay_dates": obj.get("pay_dates"),
            "paid_dates": [BillPaidDatesInner.from_dict(_item) for _item in obj["paid_dates"]] if obj.get("paid_dates") is not None else None
        })
        return _obj


